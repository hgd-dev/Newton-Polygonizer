name: Build Newton-Polygonizer

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install dependencies
    - name: Install dependencies on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y cmake g++ libx11-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev \
          libgl1-mesa-dev libfreetype6-dev libudev-dev libsfml-dev build-essential zip tar

    - name: Install dependencies on macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cmake sfml

    # Configure CMake
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        if [ "${{ runner.os }}" == "Linux" ]; then
          # Force static SFML on Linux
          cmake -DCMAKE_BUILD_TYPE=Release -DSFML_STATIC_LIBS=ON ..
        else
          # macOS: use static SFML
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(brew --prefix sfml) -DSFML_STATIC_LIBS=ON ..
        fi

    # Build
    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    # Package artifacts
    - name: Package artifact
      run: |
        cd build
        if [ "${{ runner.os }}" == "Linux" ]; then
          # Standalone Linux executable tar.gz
          tar -czvf Newton-Polygonizer-Linux.tar.gz NewtonPolygonizer
        else
          zip -r Newton-Polygonizer-macOS.zip NewtonPolygonizer.app
        fi

    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-build
        path: |
          build/Newton-Polygonizer-Linux.tar.gz
          build/Newton-Polygonizer-macOS.zip
